-- group by with agg(count, min, max, sum, avg)
use world;
select countrycode, count(CountryCode) as count 
from city
group by Countrycode
order by COUNT DESC;

-- distinct
select count(DISTINCT(language)) as count
from countrylanguage;

-- max & group by
select population, GNP
from country;

-- continent별 max(population), max(GNP)
-- 1)
select Continent, Population, GNP
from country;
-- 2) group by continent;
select Continent, max(Population), max(GNP)
from country
group by continent;

-- 최소값 구하기
select continent, min(Population), min(GNP)
from country
GROUP BY continent;

-- 0인 것 제외하고 구하기
SELECT continent, min(Population), min(GNP)
FROM country
where GNP != 0 and Population != 0
group by continent;

-- 대륙별 총(인구수)와 총(GNP)
select continent, sum(population), sum(GNP), 
sum(GNP)/sum(Population)
from country
GROUP BY continent;

-- 그룹바이 후 필터링은?
select continent, population
from country;

-- 대륙을 세는 방법
select continent, count(*) as count
from country
group by continent
order by count DESC;

-- 비교 where (alias 불가) -> groupby agg 이후이므로
-- 조건 having -> agg 이후의 컬럼을 조건
select continent, sum(Population) as S
from country
GROUP BY continent
having S > 5000000
ORDER BY S DESC;

select continent, sum(Population) as population
from country
where Population > 5000000
GROUP BY continent
ORDER BY population DESC;

-- 퀴즈1 continent별 일인당 GNP 
select continent, avg(Population), avg(GNP),
avg(GNP)/avg(population) as ratio
from country
where GNP != 0 and population != 0
group by continent
ORDER BY ratio DESC;

-- 퀴즈2 중복 제거 continent 조회
select DISTINCT(Continent) 
from country;

-- 퀴즈3 한국 도시 중, 인구 100만 넘는 도시 조회, 인구순 내림차순
select name, CountryCode, population
from city
where CountryCode='KOR' and population > 1000000
ORDER BY Population DESC;

-- 퀴즈4 city 테이블, pop 800만 ~ 1000만 사이 도시, 인구 내림차순
select name, countrycode, population
from city
where population >= 8000000 and population <= 10000000
order by population DESC;

-- 퀴즈5 country table 1940~50 독립 국가 조회, 독립 연도 순 오름차순
select name,
concat(name, "(", indepyear, ")") as name_indepyear,
Continent, population
from country
ORDER BY indepyear DESC;

-- 퀴즈6 countrylanguage 테이블 스페인어, 한국어, 영어 95%이상,
-- 국가코드를 percentage로 내림차순
select countrycode, Language, Percentage
from countrylanguage
where Language in ("Korean", "Spanish", "English") and
percentage >= 95
ORDER BY percentage DESC;

-- 퀴즈7 country table, code가 A로 시작, 
-- GovernmentFrome에 Republic 포함하는 데이터
-- like, in
select code, name, continent, GovernmentForm, Population
from country
where code like "A%" and GovernmentForm like "%Republic%";

-- 퀴즈1 country 테이블 몇개 대륙
-- count
select COUNT(distinct(Continent)) as count
from country;

-- 퀴즈2 대륙별 나라가 몇개 있는
select continent, count(*) as count
from country
GROUP BY continent 
ORDER BY count DESC;

-- 퀴즈3 국가코드별로 총인구 몇명, 내림차순
select countrycode, sum(population) as popsum
from city
group by countrycode 
order by popsum DESC;

-- 퀴즈4 countrylanguage 언어별 사용 국가수 조회
-- 많이 사용하는 언어 5~10위
-- LIMIT a, b: 인덱스a(0 부터 시작)부터 b개
select Language, count(*) as count
from countrylanguage
GROUP BY Language
ORDER BY count DESC
LIMIT 4, 6;

-- 퀴즈5 countrylangage 테이블
-- 언어별 15개 국가 이상에서 사용되는 언어 조회
-- 언어별 국가수에 따라 내림차순
select language, count(*) as count
from countrylanguage
group by language
having count >= 15
order by count DESC;

-- 퀴즈6 country table
-- 대륙별 전체 표면적 크기 구하고
-- 표면적 크기 순으로 내림차순
select Continent, sum(SurfaceArea)
from country
GROUP BY Continent
order by continent DESC;

create database test;
use test;
select test;
-- 제약조건 없는 user1 테이블 생성성
-- CHAR: 글자수만큼 storage 미리 할당
-- VCHAR: 필요한 만큼만 storage 할당
-- TEXT: 큰 문자열 저장
create table user1(
    user_id INT, 
    name Varchar(20),
    email Varchar(30),
    age INT(3),
    rdate DATE
    );

-- 제약조건 있는 user2 테이블 생성
create table user2(
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    email VARCHAR(30) UNIQUE NOT NULL,
    age INT(3) DEFAULT '30',
    rdate TIMESTAMP
    );
-- ALTER
-- 문자열 인코딩 변경
-- 현재 문자열 인코딩 확인
show variables like "character_set_database";

-- test 데이터 베이스의 문자열 인코딩을 utf8로 변경
ALTER DATABASE test CHARACTER SET = utf8;

-- 문자열 인코딩 변경 결과 확인
show variables like "character_set_database";

-- ADD: tmp column (data type: text)
ALTER TABLE user2 ADD tmp TEXT;

-- MODIFY
ALTER TABLE user2 MODIFY COLUMN tmp INT(3);

-- DROP
ALTER TABLE user2 DROP tmp;

CREATE DATABASE tmp;
USE tmp;
CREATE TABLE tmp(id INT);
DROP TABLE tmp;
SHOW DATABASES;
DROP DATABASE tmp;

-- INSERT
CREATE TABLE user (
    user_id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
    name VARCHAR(30) DEFAULT NULL,
    PRIMARY KEY(user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE addr (
    id int(11) unsigned NOT NULL AUTO_INCREMENT,
    addr VARCHAR(30) DEFAULT NULL,
    user_id int(11) DEFAULT NULL,
    PRIMARY KEY(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO user(name)
VALUES("jin"), ("po"), ("alice"), ("petter");

INSERT INTO addr(addr, user_id)
VALUES ("seoul", 1), ("pusan", 2), ("deajeon", 3), 
("deagu", 5), ("seoul", 6);

-- 그냥 조인 -> M * N
select id, user.name, addr.addr
from user
join addr;

-- INNER JOIN: 공통키값 row만 출력
select id, user.name, addr.addr
from user
join addr
on user.user_id = addr.user_id;

-- LEFT JOIN
-- FROM 기준 좌우, 좌를 살림
SELECT id, user.name, addr.addr
FROM user
LEFT JOIN addr
ON user.user_id = addr.user_id;

-- RIGHT JOIN
-- FROM 기준 좌우, 우를 살림
SELECT id, user.name, addr.addr
FROM user
RIGHT JOIN addr
ON user.user_id = addr.user_id;

-- UNION
-- column 중복제거하고 위아래로 합치기
select name
from user
union 
select addr
from addr;

-- UNION ALL
-- 중복 제거안함
select name, user_id
from user
UNION ALL
select addr, user_id
from addr;

-- FULL OUTER JOIN
select id, user.name, addr.addr
from user
left join addr
on user.user_id = addr.user_id
UNION
select id, user.name, addr.addr
from user
right join addr
on user.user_id = addr.user_id;

-- sub_query
-- 전체 나라수, 도시수, 언어수 출력
use world;
select
    (select count(name) From city) as total_city,
    (select count(name) From country) as total_country ,
    (select count(DISTINCT(language)) From countrylanguage) as total_language 
from dual;

-- 800만 이상 도시 국가코드, 이름, 도시인구수 출력
select *
from 
    (select countrycode, name, population 
    from city
    where population > 8000000) as city
join
    (select code, name
    from country) as country
on city.CountryCode = country.code;

select code, name, headofstate
from country
where code in(
    select DISTINCT(countrycode) from city where population > 8000000
    );
